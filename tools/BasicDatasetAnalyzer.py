import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from collections import defaultdict
from datetime import datetime
from typing import List, Dict, Tuple
from agents.TextGenerator import TextGenerator


class BasicDatasetAnalyzer:
    """
    A class to perform basic analysis of a dataset of publications and generate descriptive summaries using an LLM.

    Attributes:
        llm (ChatOpenAI): The language model used to generate descriptions.
        dataset (List[Dict]): The dataset containing publication records.
    """

    def __init__(self, llm: ChatOpenAI):
        """
        Initializes the DatasetAnalyzer with a language model and dataset.

        Args:
            llm (ChatOpenAI): An instance of the ChatOpenAI language model.
            dataset (List[Dict]): A list of publication records, each represented as a dictionary.
        """
        self.llm = llm
        self.data_set_describer = TextGenerator(
            prompt_explanation="You are an expert at describing datasets",
            llm=self.llm,
        )

    def analyze_dataset(self) -> Dict:
        """
        Performs basic analysis on the dataset, including total publications, date range, and publications per year.

        Returns:
            Dict: A dictionary containing the analysis results.
        """
        total_publications = len(self.dataset)
        publication_years = []

        for record in self.dataset:
            pub_date_str = record.get("PublicationDate", "")
            try:
                # Attempt to parse the publication date
                pub_date = datetime.strptime(
                    pub_date_str, "%Y-%b"
                )  # Example format: '2016-Jun'
                publication_years.append(pub_date.year)
            except ValueError:
                try:
                    pub_date = datetime.strptime(
                        pub_date_str, "%Y-%m-%d"
                    )  # Example format: '2016-02-01'
                    publication_years.append(pub_date.year)
                except ValueError:
                    # If date parsing fails, skip the record or handle accordingly
                    continue

        if not publication_years:
            date_range = "Unknown"
            publications_over_time = {}
        else:
            start_year = min(publication_years)
            end_year = max(publication_years)
            date_range = f"{start_year}-{end_year}"

            # Calculate publications per year
            publications_over_time = defaultdict(int)
            for year in publication_years:
                publications_over_time[year] += 1

            # Convert defaultdict to regular dict and sort by year
            publications_over_time = dict(
                sorted(publications_over_time.items())
            )

        analysis = {
            "Total Publications": total_publications,
            "Date Range": date_range,
            "Publications Over Time": publications_over_time,
        }

        return analysis

    def describe_analysis(self, analysis: Dict) -> str:
        """
        Uses the language model to generate a descriptive summary of the dataset analysis.

        Args:
            analysis (Dict): The analysis results containing total publications, date range, and publications per year.

        Returns:
            str: A descriptive summary generated by the LLM.
        """
        prompt = (
            f"Provide a concise summary based on the following dataset analysis:\n\n"
            f"Total Publications: {analysis['Total Publications']}\n"
            f"Date Range of Publications: {analysis['Date Range']}\n"
            f"Number of Publications Over Time:\n"
        )

        for year, count in analysis["Publications Over Time"].items():
            prompt += f"  {year}: {count} publications\n"

        prompt += (
            "\nDescribe the dataset characteristics and any observable trends."
        )

        response = self.data_set_describer.generate(input_text=prompt)
        return response

    def __call__(self, dataset: List[Dict]) -> Tuple[Dict, str]:
        """
        Executes the dataset analysis and generates a descriptive summary.

        Returns:
            Tuple[Dict, str]: A tuple containing the analysis dictionary and the descriptive summary.
        """
        self.dataset = dataset
        analysis = self.analyze_dataset()
        print("Analysis", analysis)
        description = self.describe_analysis(analysis)
        return analysis, description


if __name__ == "__main__":
    pass